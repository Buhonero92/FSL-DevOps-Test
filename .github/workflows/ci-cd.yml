name: CI Pipeline for my App

on:
  push:
    branches:
      - "**"
  pull_request:
    types: [
      opened, 
      edited
    ]
    branches:
      - devel
      - stage
      - prod

jobs:
  config:
    runs-on: ubuntu-latest

    outputs:
      deployment_environment: ${{ env.DEPLOYMENT_ENVIRONMENT || 'development'}}

    steps:
      - name: Set Development environment
        if: ${{ github.ref == 'refs/heads/devel' }}
        run: |
          echo "DEPLOYMENT_ENVIRONMENT=development" >> $GITHUB_ENV

      - name: Set Staging environment
        if: ${{ github.ref == 'refs/heads/stage' }}
        run: |
          echo "DEPLOYMENT_ENVIRONMENT=staging" >> $GITHUB_ENV

      - name: Set Production environment
        if: ${{ github.ref == 'refs/heads/prod' }}
        run: |
          echo "DEPLOYMENT_ENVIRONMENT=production" >> $GITHUB_ENV


  build:
    runs-on: ubuntu-latest

    needs:
      - config

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js env
        uses: actions/setup-node@v4
        with:
          node-version: '15.x'

      - name: Install dependencies
        run: npm install

      - name: Run linter
        run: npm run lint

      - name: Run formatter
        run: npm run prettier --check
      
      - name: Run tests
        run: CI=true npm run test

      - name: Build app
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.config.outputs.deployment_environment }}
          path: ./build

  infrastructure-deployment:
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod')   
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/devel' && 'development' || github.ref == 'refs/heads/stage' && 'staging' || github.ref == 'refs/heads/prod' && 'production' }}
    needs:
      - config
      - build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: 'us-east-1'

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init --backend-config=${{ needs.config.outputs.deployment_environment }}-backend.tf
      
      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -var "environment=${{ needs.config.outputs.deployment_environment }}"

      - name: Terraform Apply
        run: |
          cd infrastructure 
          terraform apply --auto-approve -var "environment=${{ needs.config.outputs.deployment_environment }}"

  application-deployment:
    runs-on: ubuntu-latest
    needs:
      - config
      - infrastructure-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        id: aws-deploy-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: 'us-east-1'

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.config.outputs.deployment_environment }}
          path: ./build

        
      - name: Deploy the App to s3 bucket
        run: |
          BUCKET_NAME="static-webapp-${{ needs.config.outputs.deployment_environment }}-${{ steps.aws-deploy-credentials.outputs.aws-account-id }}"
          aws s3 sync ./build s3://$BUCKET_NAME